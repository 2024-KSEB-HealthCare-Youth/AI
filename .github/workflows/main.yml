# workflow 이름
name: Python Flask CI/CD

# Event: 실행되는 시점을 설정
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read

# 하나의 Workflow는 1개 이상의 Job으로 구성됨
# 여러 Job들은 병렬 처리가 디폴트
jobs:
  build:

    # ubuntu 환경 / 가장 최신 버전
    runs-on: ubuntu-latest

    # Step: 특정 작업을 수행하는 가장 작은 단위
    # Job은 여러 Step들로 구성
    # script 여러 줄의 명령어 실행하려면 |를 써줘야 함
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.14'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask_cors pandas==2.1.3 scikit-surprise==1.1.4 flask==3.0.3 flask_restx==1.3.0 requests==2.32.3 numpy==1.26.4 tensorflow==2.15 keras==2.15 Pillow gunicorn

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd /home/ubuntu/AI/recommendation-service/app
            git pull https://${{ secrets.GIT_USER_NAME }}:${{ secrets.GIT_TOKEN }}@github.com/FeMeHaeJo/AI.git develop

            source venv/bin/activate
            sudo fuser -k -n tcp 5000 || true
            echo "" > output.log  # output.log 파일 초기화
            nohup python3 app.py > output.log 2>&1 &
            tail -n 10 output.log  # 마지막 10줄의 로그를 확인하여 애플리케이션이 시작되었는지 확인합니다
